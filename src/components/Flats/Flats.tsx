import { useState, useEffect } from "react";
import css from "./Flats.module.css";
import kv2m from "../../assets/img/kv2-mirror.png";
import kv3 from "../../assets/img/kv3.png";
import kv1i from "../../assets/img/kv1-inner.png";
import kv1b from "../../assets/img/kv1-backside.png";
import kv2l from "../../assets/img/kv2-left.png";

const images = [
  { src: kv2m, label: "2-–∫—ñ–º–Ω–∞—Ç–Ω–∞ (–¥–∑–µ—Ä–∫–∞–ª—å–Ω–∞)", category: "2" },
  { src: kv3, label: "3-–∫—ñ–º–Ω–∞—Ç–Ω–∞", category: "3" },
  { src: kv1i, label: "1-–∫—ñ–º–Ω–∞—Ç–Ω–∞ (–≤–Ω—É—Ç—Ä—ñ—à–Ω—è)", category: "1" },
  { src: kv1b, label: "1-–∫—ñ–º–Ω–∞—Ç–Ω–∞ (—Ç–∏–ª—å–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞)", category: "1" },
  { src: kv2l, label: "2-–∫—ñ–º–Ω–∞—Ç–Ω–∞ (–ª—ñ–≤–∞)", category: "2" },
];

export default function Flats() {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [lightboxIndex, setLightboxIndex] = useState<number | null>(null);
  const [isClosing, setIsClosing] = useState(false);
  const [currentCategory, setCurrentCategory] = useState<"all" | "1" | "2" | "3">("all");
  const [fade, setFade] = useState(false);
  const [visibleSlides, setVisibleSlides] = useState(3);

  // üîπ –í–∏—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª–∞–π–¥—ñ–≤ –ø–æ —à–∏—Ä–∏–Ω—ñ –≤—ñ–∫–Ω–∞
  useEffect(() => {
    const updateSlides = () => {
      if (window.innerWidth < 878) {
        setVisibleSlides(1); // –º–æ–±—ñ–ª—å–Ω–∞
      } else if (window.innerWidth < 1200) {
        setVisibleSlides(2); // –ø–ª–∞–Ω—à–µ—Ç
      } else {
        setVisibleSlides(3); // –¥–µ—Å–∫—Ç–æ–ø
      }
    };

    updateSlides();
    window.addEventListener("resize", updateSlides);
    return () => window.removeEventListener("resize", updateSlides);
  }, []);

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const filteredImages =
    currentCategory === "all"
      ? images
      : images.filter((img) => img.category === currentCategory);

  // –ó—Å—É–≤ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–∞–π–¥—É
  const nextSlide = () => {
    if (currentIndex < filteredImages.length - visibleSlides) {
      setCurrentIndex((prev) => prev + 1);
    }
  };

  const prevSlide = () => {
    if (currentIndex > 0) setCurrentIndex((prev) => prev - 1);
  };

  const openLightbox = (globalIndex: number) => {
    setLightboxIndex(globalIndex);
    document.body.style.overflow = "hidden";
  };

  const closeLightbox = () => {
    setIsClosing(true);
    setTimeout(() => {
      setLightboxIndex(null);
      setIsClosing(false);
      document.body.style.overflow = "auto";
    }, 400);
  };

  const nextLightbox = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (lightboxIndex !== null && lightboxIndex < images.length - 1) {
      setLightboxIndex(lightboxIndex + 1);
    }
  };

  const prevLightbox = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (lightboxIndex !== null && lightboxIndex > 0) {
      setLightboxIndex(lightboxIndex - 1);
    }
  };

  // –ö–ª–∞–≤—ñ—à—ñ
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Escape" && lightboxIndex !== null) closeLightbox();
      if (e.key === "ArrowRight" && lightboxIndex !== null && lightboxIndex < images.length - 1) {
        setLightboxIndex(lightboxIndex + 1);
      }
      if (e.key === "ArrowLeft" && lightboxIndex !== null && lightboxIndex > 0) {
        setLightboxIndex(lightboxIndex - 1);
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [lightboxIndex]);

  // –ó–º—ñ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const handleCategoryClick = (category: "all" | "1" | "2" | "3") => {
    setFade(true);
    setTimeout(() => {
      setCurrentCategory(category);
      setCurrentIndex(0);
      setFade(false);
    }, 300);
  };

  return (
    <section className={css.flats} id="flats">
      <div className={css.container}>
        <h2 className={css.title}>–í–ò–ë–Ü–† –ö–í–ê–†–¢–ò–†</h2>

        {/* –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π */}
        <div className={css.buttonsContainer}>
          <div className={css.categoryButtons}>
            {["all", "1", "2", "3"].map((cat) => (
              <button
                key={cat}
                type="button"
                className={`${css.specialCategoryBtn} ${currentCategory === cat ? css.active : ""}`}
                onClick={() => handleCategoryClick(cat as "all" | "1" | "2" | "3")}
              >
                {cat === "all" ? "–í—Å—ñ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è" : `${cat}-–∫—ñ–º–Ω–∞—Ç–Ω—ñ`}
              </button>
            ))}
          </div>
          <button type="button" className={css.consultationBtn}>
            –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø
          </button>
        </div>

        {/* –°–ª–∞–π–¥–µ—Ä */}
        <div className={css.slider}>
          <button
            onClick={prevSlide}
            className={css.navBtn}
            disabled={currentIndex === 0}
          >
            ‚Äπ
          </button>
          <div className={css.sliderWindow}>
            <div
              className={`${css.sliderTrack} ${fade ? css.fadeOut : css.fadeIn}`}
              style={{ transform: `translateX(-${currentIndex * (320 + 20)}px)` }} // 320 —à–∏—Ä–∏–Ω–∞ + 20 –≤—ñ–¥—Å—Ç—É–ø
            >
              {filteredImages.map((item, i) => {
                const globalIndex = images.indexOf(item);
                return (
                  <div key={i} className={css.slide} onClick={() => openLightbox(globalIndex)}>
                    <p className={css.flatLabel}>{item.label}</p>
                    <img src={item.src} alt={item.label} />
                  </div>
                );
              })}
            </div>
          </div>
          <button
            onClick={nextSlide}
            className={css.navBtn}
            disabled={currentIndex >= filteredImages.length - visibleSlides}
          >
            ‚Ä∫
          </button>
        </div>

        {/* –¶—ñ–Ω–∞ */}
        <div className={css.priceContainer}>
          <p className={css.string}>
            –¶—ñ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∏ –≤—ñ–¥: <span>420 –¥–æ–ª./–º<sup>2</sup></span>
          </p>
          <p className={css.string}>
            –¥—ñ–π—Å–Ω–∞ –¥–æ: <span>30.09.2025</span>
          </p>
        </div>
      </div>

      {/* –õ–∞–π—Ç–±–æ–∫—Å */}
      {lightboxIndex !== null && (
        <div className={css.lightbox} onClick={closeLightbox}>
          <button className={css.closeBtn} onClick={closeLightbox}>√ó</button>
          <button className={css.prevBtn} onClick={prevLightbox} disabled={lightboxIndex === 0}>‚Äπ</button>
          <img
            src={images[lightboxIndex].src}
            alt={images[lightboxIndex].label}
            className={`${css.lightboxImg} ${isClosing ? css.zoomOut : ""}`}
            onClick={(e) => e.stopPropagation()}
          />
          <button className={css.nextBtn} onClick={nextLightbox} disabled={lightboxIndex === images.length - 1}>‚Ä∫</button>
        </div>
      )}
    </section>
  );
}
